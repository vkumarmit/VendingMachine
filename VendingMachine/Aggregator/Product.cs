using System;
using System.Collections.Generic;
using System.Text;

namespace VendingMachine.Aggregator
{
    //The responsibility of class to server the domain by domain driven.
    //Property structure: Auto Prop with(=>) Indexer.
    //Note: Do not confuse with old property structure.
    //Why Virtual? I am leaving this math for the discussion.
    public class Product : IAggregateRoot, IEquatable<Product>
    {
        //default constructor
        public Product()
        {

        }
        private int _orderNumber;
        private string _productCode;
        private string _name;
        private string _description;
        private int _quantity;
        private decimal _price;
        private decimal _actualCost;

        public virtual int OrderNumber
        {
            get => _orderNumber;
            set => _orderNumber = value;
        }
        public virtual string ProductCode
        {
            get => _productCode;
            set => _productCode = value;
        }

        public virtual string Name
        {
            get => _name;
            set => _name = value;
        }

        public virtual string Description
        {
            get => _description;
            set => _description = value;
        }

        public virtual int Quantity
        {
            get => _quantity;
            set => _quantity = value;
        }

        public virtual decimal Price
        {
            get => _price;
            set => _price = value;
        }
        public virtual decimal ActualCost
        {
            get => _actualCost;
            set => _actualCost = value;
        }

        public Product(int orderNumber, string productCode, string name, string description, int quantity, decimal price, decimal actualCost)
        {
            _orderNumber = orderNumber;
            _productCode = productCode;
            _name = name;
            _description = description;
            _quantity = quantity;
            _price = price;
            _actualCost = actualCost;
        }

        //Note: Equals and hashcode is generated by the VS IDE
        //OR we can use the Re-Sharper.
        public bool Equals(Product other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return _orderNumber == other._orderNumber && _productCode == other._productCode && _name == other._name && _description == other._description && _quantity == other._quantity && _price == other._price && _actualCost == other._actualCost;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Product) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = _orderNumber;
                hashCode = (hashCode * 397) ^ (_productCode != null ? _productCode.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (_description != null ? _description.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ _quantity;
                hashCode = (hashCode * 397) ^ _price.GetHashCode();
                hashCode = (hashCode * 397) ^ _actualCost.GetHashCode();
                return hashCode;
            }
        }
    }
}
