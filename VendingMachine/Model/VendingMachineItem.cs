using System;
using System.Collections.Generic;
using System.Text;

namespace VendingMachine.Model
{
    public abstract class VendingMachineItem : IEquatable<VendingMachineItem>
    {
        public int OrderNumber { get; }
        public string ProductName { get; }
        public decimal Price { get; }
        public int TotalItem { get; private set; }

        protected VendingMachineItem(int orderNumber, string productName, decimal price, int totalItem)
        {
            this.OrderNumber = orderNumber;
            this.ProductName = productName;
            this.Price = price;
            this.TotalItem = totalItem;
        }

        public bool DecrementItem(int purchaseQuantity)
        {
            if (TotalItem <= 0) return false;
            
            TotalItem = TotalItem - purchaseQuantity;
            return true;
        }

        //Note: Equals and hashcode is generated by the VS IDE
        //OR we can use the Re-Sharper.
        public bool Equals(VendingMachineItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return OrderNumber == other.OrderNumber && ProductName == other.ProductName && Price == other.Price && TotalItem == other.TotalItem;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((VendingMachineItem) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = OrderNumber;
                hashCode = (hashCode * 397) ^ (ProductName != null ? ProductName.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ Price.GetHashCode();
                hashCode = (hashCode * 397) ^ TotalItem;
                return hashCode;
            }
        }
    }
}
